namespace Advent2017;

public partial class Day21 : Advent.Day
{
    /*
        *  Description -   Input is a set of transformations.  You have a sqaure grid; if its size is divisible by 2 then split it into 2x2 squares, otherwise 3x3 squares.
        *                  Apply the appropriate transformation to each square in turn to create a bigger grid.
        *  
        *  Part 1 -        How many #'s are in the grid after 5 transformations?
        *  Part 2 -        As part 1, but for 18 transformations.
    */
    public Day21(bool testMode, int whichPart, string input) : base(testMode, whichPart, input)
    {
        switch (WhichPart, TestMode)
        {
            case (1, true):
                Inputs.Add("../.# => ##./#../...;.#./..#/### => #..#/..../..../#..#");
                Expecteds.Add("12");
                break;
            case (1, false):
                Inputs.Add
                Expecteds.Add("167");
                break;
            case (2, true):
                Inputs.Add("../.# => ##./#../...;.#./..#/### => #..#/..../..../#..#");
                Expecteds.Add("2");
                break;
            case (2, false):
                Inputs.Add
                Expecteds.Add("2425195");
                break;
        }
    }
}
