namespace Advent2019;

public partial class Day16 : Advent.Day
{
    /*
        *  Description -   Input is a seed for an error checking routine
        *  
        *  Part 1 -        Applying an obscure algorithm to the input, repeating 1000 times, what are the first eight digits of the resulting string?
        *  Part 2 -        Using the same algorithm, but starting with the original input repeated 10000 times, what are the eight characters starting
        *                  at the offset position given by the first seven characters of the input?
    */
    public Day16(bool testMode, int whichPart) : base(testMode, whichPart)
    {
        switch (WhichPart, TestMode)
        {
            case (1, true):
                AddInput("12345678");
                Expecteds.Add("01029498");
                AddInput("69317163492948606335995924319873");
                Expecteds.Add("52432133");
                AddInput("19617804207202209144916044189917");
                Expecteds.Add("73745418");
                AddInput("80871224585914546619083218645595");
                Expecteds.Add("24176176");
                break;
            case (1, false):
                AddInput("59764635797473718052486376718142408346357676818478503599633670059885748195966091103097769012608550645686932996546030476521264521211192035231303791868456877717957482002303790897587593845163033589025995509264282936119874431944634114034231860653524971772670684133884675724918425789232716494769777580613065860450960426147822968107966020797566015799032373298777368974345143861776639554900206816815180398947497976797052359051851907518938864559670396616664893641990595511306542705720282494028966984911349389079744726360038030937356245125498836945495984280140199805250151145858084911362487953389949062108285035318964376799823425466027816115616249496434133896");
                Expecteds.Add("63483758");
                break;
            case (2, true):
                AddInput("03081770884921959731165446850517");
                Expecteds.Add("53553731");
                AddInput("02935109699940807407585447034323");
                Expecteds.Add("78725270");
                AddInput("03036732577212944063491565474664");
                Expecteds.Add("84462026");
                break;
            case (2, false):
                AddInput("59764635797473718052486376718142408346357676818478503599633670059885748195966091103097769012608550645686932996546030476521264521211192035231303791868456877717957482002303790897587593845163033589025995509264282936119874431944634114034231860653524971772670684133884675724918425789232716494769777580613065860450960426147822968107966020797566015799032373298777368974345143861776639554900206816815180398947497976797052359051851907518938864559670396616664893641990595511306542705720282494028966984911349389079744726360038030937356245125498836945495984280140199805250151145858084911362487953389949062108285035318964376799823425466027816115616249496434133896");
                Expecteds.Add("96099551");
                break;
        }
    }
}
