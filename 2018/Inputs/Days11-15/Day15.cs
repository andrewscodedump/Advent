namespace Advent2018;

public partial class Day15 : Advent.Day
{
    /*
        *  Description -   Input is a map of a cave full of Elves and Goblins (# are walls, . spaces).  Each turn, all the goblins and elves (starting in the top left) move towards the nearest creature of the other kind.
        *                  If they are next to an enemy at the start (or after they move), they attack it, reducing the enemy's health by their hit power.  When someone's health hits zero, they are removed.
        *  
        *  Part 1 -        After all elves or goblins have been killed, what is the score (the number of survivors times the number of rounds taken).
        *  Part 2 -        If the elves' hit points were increased to the minimum amount so that none of them would be killed, what would the score be?
        *  
        *  There's a bug in here where for the first test on part 1 and live part 1 it's counting one round too few.
    */
    public Day15(bool testMode, int whichPart) : base(testMode, whichPart)
    {
        switch (WhichPart, TestMode)
        {
            case (1, true):
                AddInput("#######;#G..#E#;#E#E.E#;#G.##.#;#...#E#;#...E.#;#######");
                Expecteds.Add("36334");
                AddInput("#######;#E..EG#;#.#G.E#;#E.##E#;#G..#.#;#..E#.#;#######");
                Expecteds.Add("39514");
                AddInput("#######;#E.G#.#;#.#G..#;#G.#.G#;#G..#.#;#...E.#;#######");
                Expecteds.Add("27755");
                AddInput("#######;#.E...#;#.#..G#;#.###.#;#E#G#G#;#...#G#;#######");
                Expecteds.Add("28944");
                AddInput("#########;#G......#;#.E.#...#;#..##..G#;#...##..#;#...#...#;#.G...G.#;#.....G.#;#########");
                Expecteds.Add("18740");
                AddInput("#######;#.G...#;#...EG#;#.#.#G#;#..G#E#;#.....#;#######");
                Expecteds.Add("27730");
                break;
            case (1, false):
                AddInput("################################;###################........#####;###################..G..#G..####;####################........####;##..G###############G......#####;###..G###############.....######;#####.######..######....G##..###;#####.........####............##;#########...#####.............##;#########...####..............##;#########E#####.......GE......##;#########............E...G...###;######.###....#####..G........##;#.G#....##...#######.........###;##.#....##GG#########.........##;#....G#....E#########....#....##;#...........#########.......####;#####..G....#########...##....##;#####....G..#########.#.......##;#######...G..#######G.....#...##;######....E...#####............#;######...GG.......E......#...E.#;#######.G...#....#..#...#.....##;#######..........#####..####.###;########.......E################;#######..........###############;########.............###########;#########...#...##....##########;#########.....#.#..E..##########;################.....###########;################.##E.###########;################################");
                Expecteds.Add("189000");
                break;
            case (2, true):
                AddInput("#######;#.G...#;#...EG#;#.#.#G#;#..G#E#;#.....#;#######");
                Expecteds.Add("4988");
                break;
            case (2, false):
                AddInput("################################;###################........#####;###################..G..#G..####;####################........####;##..G###############G......#####;###..G###############.....######;#####.######..######....G##..###;#####.........####............##;#########...#####.............##;#########...####..............##;#########E#####.......GE......##;#########............E...G...###;######.###....#####..G........##;#.G#....##...#######.........###;##.#....##GG#########.........##;#....G#....E#########....#....##;#...........#########.......####;#####..G....#########...##....##;#####....G..#########.#.......##;#######...G..#######G.....#...##;######....E...#####............#;######...GG.......E......#...E.#;#######.G...#....#..#...#.....##;#######..........#####..####.###;########.......E################;#######..........###############;########.............###########;#########...#...##....##########;#########.....#.#..E..##########;################.....###########;################.##E.###########;################################");
                Expecteds.Add("38512");
                break;
        }
    }
}
